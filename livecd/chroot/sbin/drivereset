#!/usr/bin/perl -w
# ----------------------------------------------------------------------
#   Drive Reset
#   Resets a hard drive to factory settings.  For more information, see:
#     * http://ata.wiki.kernel.org/index.php/ATA_Secure_Erase
#     * http://cmrr.ucsd.edu/people/Hughes/SecureErase.shtml
# ----------------------------------------------------------------------
#   Copyright (C) 2012 RedoBackup.org
# ----------------------------------------------------------------------
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ----------------------------------------------------------------------

use strict;
use warnings;
use Data::Dumper;
use Glib qw{ TRUE FALSE };
use Gtk2 '-init';
use Gtk2::SimpleList;
use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

##### Constants found in our program ###################################
use constant TEST_MODE     => FALSE;
use constant DATA_DIR      => "/usr/share/redo/";
use constant GLADE_UI      => "drivereset.glade";
use constant RESET_STEPS   => ( "Warning!",
                                "Step 1: Select Target Drives",
                                "Step 2: Confirm Drive Reset",
                                "Step 3: Factory Reset Drives" );


##### Main code ########################################################
main();
exit(0);


##### Functions and Subroutines ########################################
sub main {
  # Start the main application
  our $builder;
  my $window;
  $builder = Gtk2::Builder->new();
  $builder->add_from_file(DATA_DIR.GLADE_UI);
  $window = $builder->get_object('main_app');
  $builder->connect_signals(undef);
  $builder->get_object('main_tabs')->set_show_tabs(FALSE);
  set_subtitle((RESET_STEPS)[0]);
  $window->show();
  Gtk2->main();
}

sub reset_step {
  # Advance to the next step
  my $step = $_[0];
  if (!defined($step)) { $step = 1; }
  our $builder;
  $step = $builder->get_object('main_tabs')->get_current_page()+1;
  set_subtitle((RESET_STEPS)[$step-1]);
  if ($step == 1) {
    # Reset Step 1
    $builder->get_object('next_button')->set_sensitive(TRUE);
  } elsif ($step == 2) {
    # Reset Step 2
    $builder->get_object('next_button')->set_sensitive(FALSE);
    set_drive_list('target_drives');
    $builder->get_object('btnRefresh')->grab_focus();
  } elsif ($step == 3) {
    # Reset Step 3
    $builder->get_object('next_button')->set_sensitive(TRUE);
  } elsif ($step == 4) {
    # Reset Step 4
    refresh_window();
    $builder->get_object('next_button')->set_sensitive(FALSE);
    $builder->get_object('next_button')->hide();
    our %PROGRESS = ();
    prepare_all();
    reset_all();
  }
  refresh_window();
}

sub prepare_all {
  # Loop through the targeted drives and prepare each
  our %PROGRESS;
  our %drives;
  our @targets;
  $PROGRESS{'done'} = FALSE;
  our $builder->get_object('progress_bar')->set_sensitive(TRUE);
  foreach my $target (@targets) {
    $PROGRESS{$target}{'done'} = FALSE;
    $PROGRESS{$target}{'description'} = $drives{$target}{'dev_desc'}." (".$drives{$target}{'dev_size'}.")";
    update_status($target, "Preparing to reset device $target");
    prepare_drive($target);
    refresh_window();
  }
  refresh_window();
}

sub reset_all {
  # Loop through the targeted drives and start resetting each
  our %PROGRESS;
  our %drives;
  our @targets;
  foreach my $target (@targets) {
    update_status($target, "Starting to reset device $target");
    reset_drive($target);
    refresh_window();
  }
  Glib::Timeout->add(100, \&update_progress);
  refresh_window();
}

sub prepare_drive {
  # Prepare a drive for reset
  our %PROGRESS;
  my $target = $_[0];
  # Verify that no partitions on this device are mounted
  update_status($target, "Making sure drive is not mounted");
  print "*** umount /dev/$target*\n";
  `umount /dev/$target*`;
  my $mounts = `mount | grep /dev/$target | wc -l`;
  if ($mounts > 0) {
    beeper('warning');
    message_box("There are $mounts partitions still mounted on device $target. This drive will not be reset.", 'error');
    $PROGRESS{$target}{'done'} = TRUE;
    $PROGRESS{$target}{'error'} = TRUE;
    update_status($target, "Unable to reset drive: Disk is mounted");
    return 0;
  }
  # Get the drive's current status
  update_status($target, "Getting current status of device $target");
  print "*** udevadm trigger\n";
  `udevadm trigger`;
  sleep(3);
  my $details = get_drive_details($target);
  # Does drive support secure erase commands?
  update_status($target, "Verifying ATA secure erase support for device $target");
  if ($$details{'id_ata_feature_set_security'} ne '1') {
    beeper('warning');
    message_box("Device $target does not support the ATA secure erase command. This drive will not be reset.", 'error');
    $PROGRESS{$target}{'done'} = TRUE;
    $PROGRESS{$target}{'error'} = TRUE;
    update_status($target, "Unable to reset drive: ATA secure erase not supported");
    return 0;
  }
  # Is drive frozen?
  update_status($target, "Making sure drive is not frozen");
  if ($$details{'id_ata_feature_set_security_frozen'} eq '1') {
    beeper('warning');
    message_box("Device $target is still marked as frozen. This drive will not be reset.", 'error');
    $PROGRESS{$target}{'done'} = TRUE;
    $PROGRESS{$target}{'error'} = TRUE;
    update_status($target, "Unable to reset drive: Disk marked frozen");
    return 0;
  }
  # Is drive locked or password set?
  update_status($target, "Making sure drive is not locked");
  if (($$details{'id_ata_feature_set_security_level'} eq 'high') || ($$details{'id_ata_feature_set_security_locked'} eq '1')) {
    print "Device $target is already locked. Attempting to proceed anyway.\n";
    update_status($target, "Device $target is already locked; will attempt to reset");
  }
  # Set time estimate
  if ($$details{'id_ata_feature_set_security_erase_unit_min'} ne 0) {
    $PROGRESS{$target}{'finish'} = $$details{'id_ata_feature_set_security_erase_unit_min'};
  } else {
    $PROGRESS{$target}{'finish'} = 0;
  }
  # Write verification data to drive
  update_status($target, "Writing verification data to drive $target");
  print "*** echo 'INCOMPLETE' | dd of=/dev/$target; sync;\n";
  my $result = '';
  if (!TEST_MODE) { $result = `echo 'INCOMPLETE' | dd of=/dev/$target 2>&1; sync;`; }
  if ($result =~ m/error|fail|problem|device/si) { message_box("Failed to write to drive $target. Reset may fail, but proceeding anyway.", 'warning'); }
  sleep(1);
  # Set security password for the drive
  update_status($target, "Setting security password for device $target");
  print "*** hdparm --user-master u --security-set-pass RESET /dev/$target\n";
  if (!TEST_MODE) { $result = `hdparm --user-master u --security-set-pass RESET /dev/$target 2>&1`; }
  if ($result =~ m/error|fail|problem|ioctl|invalid/si) { message_box("Failed to set password for drive $target.", 'warning'); }
  # Get the drive's current status
  update_status($target, "Refreshing status of device $target");
  print "*** udevadm trigger\n";
  `udevadm trigger`;
  sleep(3);
  $details = get_drive_details($target);
  print Dumper($details);
  # Is drive password set?
  if (!TEST_MODE) {
    if (($$details{'id_ata_feature_set_security_enabled'} ne '1') || ($$details{'id_ata_feature_set_security_level'} ne 'high')) {
      message_box("Could not enable security mode for device $target. This drive will not be reset.", 'error');
      $PROGRESS{$target}{'done'} = TRUE;
      $PROGRESS{$target}{'error'} = TRUE;
      update_status($target, "Unable to reset drive: Password could not be set");
      return 0;
    }
  }
  update_status($target, "Drive is ready to be reset");
  return 1;
}

sub reset_drive {
  # Safely issue ATA secure erase commands on a given device by
  # choosing which step to take based on its current status
  our %PROGRESS;
  my $target = $_[0];
  # Calculate time estimate
  update_status($target, "Calculating time estimate for completion");
  $PROGRESS{$target}{'start'} = time();
  if ($PROGRESS{$target}{'finish'} ne 0) {
    $PROGRESS{$target}{'finish'} = time() + $PROGRESS{$target}{'finish'} * 60;
  } else {
    $PROGRESS{$target}{'finish'} = 0;
  }
  # Start the reset process and set up a pipe
  update_status($target, "Preparing to issue secure erase command to device $target");
  print "*** time hdparm --user-master u --security-erase RESET /dev/$target |\n";
  if (TEST_MODE) {
    # Pipe to a fake command just to demonstrate what it will look like
    open $PROGRESS{$target}{'pipe'}, "time sleep 15 |";
  } else {
    # Pipe to real ATA secure erase
    open $PROGRESS{$target}{'pipe'}, "time hdparm --user-master u --security-erase RESET /dev/$target |";
  }
  my $flags = fcntl($PROGRESS{$target}{'pipe'}, F_GETFL, 0) or message_box("Reset started for $target, but we may not know when it finishes because we couldn't get flags on the process: $!", 'warning');
  $flags |= O_NONBLOCK;
  fcntl($PROGRESS{$target}{'pipe'}, F_SETFL, $flags) or message_box("Reset started for $target, but we may not know when it finishes because we couldn't set flags on the process: $!", 'warning');
  print "Reset estimated to last from ".$PROGRESS{$target}{'start'}." until ".$PROGRESS{$target}{'finish'}."...\n";
  update_status($target, "Resetting...");
  return 1;
}

sub update_status {
  # Change the status for a device and then update the window
  my $target = $_[0];
  my $status = $_[1];
  our %PROGRESS;
  $PROGRESS{$target}{'status'} = $status;
  update_progress();
}

sub update_progress {
  # Update the progress text and progress bar
  our %PROGRESS;
  our %drives;
  our @targets;
  if ($PROGRESS{'done'}) { return FALSE; }
  my $progress_bar = our $builder->get_object('progress_bar');
  my $tv = $builder->get_object('target_progress');
  my $slist = Gtk2::SimpleList->new_from_treeview(
    $tv,
    'Device'          => 'text',
    'Description'     => 'text',
    'Serial Number'   => 'text',
    'Drive Size'      => 'text',
    'Connection'      => 'text',
    'Estimate'        => 'text',
    'Percent'         => 'text',
    'Status'          => 'text',
  );
  foreach my $target (@targets) {
    my $dev_estimate = $drives{$target}{'id_ata_feature_set_security_erase_unit_min'};
    my $buffer = '';
    my $pct_complete = 'Unknown';
    if (defined($PROGRESS{$target}{'pipe'})) {
      my $rv = sysread($PROGRESS{$target}{'pipe'}, $buffer, 1);
      chomp($buffer);
      if ((!defined($rv))||($rv==1)) {
        # Show the time elasped and remaining
        if ((defined($dev_estimate)) && ($dev_estimate>0)) {
          my $est = $PROGRESS{$target}{'finish'} - $PROGRESS{$target}{'start'};
          my $cur = $PROGRESS{$target}{'finish'} - time();
          my $mins_left = sprintf("%.1f", $cur/60);
          my $pct = ($est-$cur)/$est;
          if ($mins_left<=0) { $mins_left = 0; $pct = 1; }
          my $time_remaining_msg = "About $mins_left minute";
          $time_remaining_msg .= "s" if ($mins_left!=1);
          $time_remaining_msg .= " remaining";
          my $pct_text = sprintf("%.2f", $pct*100);
          $pct_complete = "$pct_text%";
          $PROGRESS{$target}{'status'} = $time_remaining_msg;
        } else {
          my $elapsed = time() - $PROGRESS{$target}{'start'};
          $elapsed = sprintf("%.1f", $elapsed/60);
          $PROGRESS{$target}{'status'} = "Resetting: $elapsed minutes elapsed";
        }
     } else {
        print "Reset of $target is complete.\n";
        if (!$PROGRESS{$target}{'done'}) {
          # This code will be executed once, when the target drive is done
          $PROGRESS{$target}{'finish'} = time();
          my $elapsed = $PROGRESS{$target}{'finish'} - $PROGRESS{$target}{'start'};
          $elapsed = sprintf("%.1f", $elapsed/60);
          $PROGRESS{$target}{'status'} = "Reset completed in $elapsed minutes";
          $pct_complete = "100%";
          print "Verifying no data is on drive...\n";
          my $bytes_checked = 0;
          open(my $FILE, "/dev/$target") or print "Could not read from device!\n";
          binmode($FILE);
          while ( ($bytes_checked<=32768) && (read($FILE, my $byte, 1)) ) {
            print "Verifying char $bytes_checked on $target: ".ord($byte)."\n";
            if (ord($byte)!=0) {
              print "*** Data found on drive!\n";
              $PROGRESS{$target}{'status'} = "Reset failed: Drive still contains data";
              $PROGRESS{$target}{'error'} = 1;
            }
            $bytes_checked++;
          }
          close($FILE);
          if ($bytes_checked==0) {
            $PROGRESS{$target}{'status'} = "Reset failed: Could not verify reset";
            $PROGRESS{$target}{'error'} = 1;
          }
        }
        $PROGRESS{$target}{'done'} = TRUE;
      }
    }
    if ((defined($dev_estimate)) && ($dev_estimate eq '0')) { $dev_estimate = 'Unknown'; } else { $dev_estimate .= " minutes"; }
    if ($PROGRESS{$target}{'done'}) { $pct_complete = 'DONE'; }
    if ($PROGRESS{$target}{'error'}) { $pct_complete = 'ERROR'; }
    push @{$slist->{data}}, [ $target, $drives{$target}{'dev_desc'}, $drives{$target}{'id_serial_short'}, $drives{$target}{'dev_size'}, $drives{$target}{'id_bus'}, $dev_estimate, $pct_complete, $PROGRESS{$target}{'status'} ];
    $slist->get_selection->unselect_all();
  }
  # Loop through all the targets to see if we're done
  $PROGRESS{'done'} = TRUE;
  foreach my $target (@targets) {
    if ($PROGRESS{$target}{'done'} ne TRUE) { $PROGRESS{'done'} = FALSE; }
  }
  # Set the progress bar
  if ($PROGRESS{'done'}) {
    # We are completely done with all drives
    refresh_window();
    final_cleanup();
    $progress_bar->set_fraction(1);
    $progress_bar->set_text("100% Complete");
    $builder->get_object('cancel_button')->set_label('Exit');
    refresh_window();
    beeper('done');
    message_box("Drive reset complete. Restart your computer before writing any information to the target drives.");
  } else {
    # Pulse the progress bar
    $progress_bar->set_text("Please wait...");
    $progress_bar->pulse();
  }
  refresh_window();
  print "Progress:";
  print Dumper(\%PROGRESS);
  if (!$PROGRESS{'done'}) { return TRUE; } else { return FALSE; }
}

sub final_cleanup {
  # Make sure all the drives are unlocked and no passwords are set
  our @targets;
  our %PROGRESS;
  print "Confirming that all drives are unlocked.\n";
  foreach my $target (@targets) {
    if ($PROGRESS{$target}{'error'}) {
      message_box("Device $target was not reset: ".$PROGRESS{$target}{'status'}, 'warning');
    }
    print "Checking device $target:\n";
    sleep(1);
    `udevadm trigger`;
    sleep(3);
    my $details = get_drive_details($target);
    print Dumper($details);
    # Is drive locked or password set?
    if (($$details{'id_ata_feature_set_security_level'} eq 'high') || ($$details{'id_ata_feature_set_security_locked'} eq '1')) {
      print "Reset completed on $target, but drive remains locked. Attempting to unlock drive...\n";
      if (!TEST_MODE) { `hdparm --user-master u --security-disable RESET /dev/$target`; }
      # Get the drive's current status
      print "Refreshing status of device $target...\n";
      print "*** udevadm trigger\n";
      `udevadm trigger`;
      sleep(3);
      $details = get_drive_details($target);
      # Is drive locked and password set?
      if (($$details{'id_ata_feature_set_security_level'} eq 'high') || ($$details{'id_ata_feature_set_security_locked'} eq '1')) {
        beeper('warning');
        message_box("Could not disable security mode for device $target.  You may need to run the 'hdparm --security-disable' command before this drive can be used.", 'warning');
      }
    } else {
      print "Device $target is unlocked.\n";
    }
    # If the drive is unlocked, see if there are HPA sectors that could be freed
    if (($$details{'id_ata_feature_set_security_level'} ne 'high') && ($$details{'id_ata_feature_set_security_locked'} ne '1')) {
      # How many HPA sectors are in use?
      my $sectors_real = $$details{'hpa_sectors_real'};
      my $sectors_visible = $$details{'hpa_sectors_visible'};
      my $sector_diff = $sectors_real - $sectors_visible;
      if ($sector_diff > 0) {
        my $sector_mb = int($sector_diff/2048);
        print "Device $target has $sector_mb MB allocated to HPA.\n";
        my $result = '';
        my $response = get_confirmation("Would you like to attempt to free ".$sector_mb."MB of host-protected area (HPA) on this hard drive?");
        if (($response eq 'yes') && (!TEST_MODE)) {
          $result = `hdparm -N p$sectors_real /dev/$target 2>&1`;
          message_box("Command executed. Response:\n\n$result");
        }
        $response = get_confirmation("Would you like to attempt to restore the manufacturer's device configuration (DCO) on this hard drive?");
        if (($response eq 'yes') && (!TEST_MODE)) {
          $result = `hdparm --yes-i-know-what-i-am-doing --dco-restore /dev/$target 2>&1`;
          message_box("Command executed. Response:\n\n$result");
        }
      }
    } else {
      print "Device $target does not have any HPA space to recover.\n";
    }
  }
}

sub next_tab {
  # Show the next tab of a Backup or Restore procedure
  our $builder;
  $builder->get_object('main_tabs')->next_page();
  my $tab = $builder->get_object('main_tabs')->get_current_page();
  reset_step($tab+1);
}

sub target_refresh {
  # Refresh and redo step 2
  reset_step(2);
}

sub get_target_list {
  # Return the partitions that have been selected from a list
  my @selected = ();
  my $tv = our $builder->get_object($_[0]);
  my $mdl = $tv->get_model();
  my $total = $mdl->iter_n_children();
  for (my $i=0; $i<$total; $i++) {
    my $iter = $mdl->get_iter_from_string("$i");
    my ($drive, $targeted) = $mdl->get($iter, 0, 1);
    if ($targeted eq '1') { push(@selected, $drive); }
  }
  return @selected;
}

sub target_changed {
  # The list of target drives has been clicked, and may have changed
  our %drives;
  our @targets;
  my $next_enabled = TRUE;
  @targets = get_target_list('target_drives');
  foreach my $dev (@targets) {
    if ((defined($drives{$dev}{'id_ata_feature_set_security_frozen'})) && ($drives{$dev}{'id_ata_feature_set_security_frozen'} eq '1')) {
      print "Drive $dev selected but currently frozen.\n";
      $next_enabled = FALSE;
    }
  }
  if (scalar(@targets)==0) { $next_enabled = FALSE; }
  our $builder->get_object('next_button')->set_sensitive($next_enabled);
}

sub set_subtitle {
  # Set the subtitle, which is a description of the current step
  my $subtitle = $_[0];
  our $builder->get_object('main_subtitle')->set_text($subtitle);
}

sub set_cursor {
  # Set the mouse pointer cursor
  my $cursor = $_[0];
  our $builder->get_object('main_app')->window()->set_cursor(Gtk2::Gdk::Cursor->new($cursor));
}

sub set_busy {
  # Disable the application to indicate that we are busy working
  if ($_[0] ne '') {
    set_cursor("watch");
    our $builder->get_object('main_app')->set_sensitive(FALSE);
    show_busy_bar($_[0]);
  } else {
    set_cursor("arrow");
    our $builder->get_object('main_app')->set_sensitive(TRUE);
    our $busy_bar->destroy();
  }
  refresh_window();
}

sub show_busy_bar {
  # Show a pulsing progress bar
  my $message = $_[0];
  if (!defined($message)) { $message = "Please wait..."; }
  my $parent = our $builder->get_object('main_app');
  our $busy_bar = Gtk2::Dialog->new('Please Wait...', $parent,
    'destroy-with-parent',
    'gtk-cancel' => 'none'
  );
  my $pgb = Gtk2::ProgressBar->new();
  $pgb->set_text($message);
  my $abox = Gtk2::Alignment->new(.50, .50, 1, 1);
  $abox->set_padding(30, 30, 30, 30);
  $busy_bar->vbox->add($abox);
  $abox->add($pgb);
  $busy_bar->signal_connect(response => sub { $_[0]->destroy });
  $busy_bar->show_all;
  $busy_bar->window()->set_cursor(Gtk2::Gdk::Cursor->new('watch'));
  Glib::Timeout->add(100, \&update_busy_bar, $pgb);
}

sub update_busy_bar {
  # Update the pulsing progress bar
  my ($progress_bar) = @_;
  $progress_bar->pulse;
  return TRUE;
}

sub refresh_window {
  # Refresh the application window
  while (Gtk2->events_pending()) { Gtk2->main_iteration(); }
}

sub get_confirmation {
  # Get confirmation from a yes/no dialog
  our $builder;
  my $question = "Are you sure?";
  if (defined($_[0])) { $question = $_[0]; }
  my $dialog = Gtk2::MessageDialog->new($builder->get_object('main_app'),
    'destroy-with-parent',
    'warning', # message type
    'yes-no', # which set of buttons?
    $question);
  my $response = $dialog->run;
  $dialog->destroy;
  return $response;
}

sub message_box {
  # Show an informational $message of $type: [info|warning|question|error|other]
  my $parent = our $builder->get_object('main_app');
  my $message = $_[0];
  my $type = $_[1];
  if (!defined($type)) { $type = 'info'; }
  my $dialog = Gtk2::MessageDialog->new($parent, 'modal', $type, 'ok', $message);
  $dialog->run;
  $dialog->destroy;
}

sub set_drive_list {
  # Get all physical drives (not partitions)
  set_busy("Reading status for each drive...");
  our %drives = get_drive_list();
  our @targets;
  if (keys(%drives)==0) { fatal_crash('Could not locate any partitions on your computer.'); }
  my $tv = our $builder->get_object($_[0]);
  my $slist = Gtk2::SimpleList->new_from_treeview(
    $tv,
    'Device'          => 'text',
    'Reset?'          => 'bool',
    'Description'     => 'text',
    'Serial Number'   => 'text',
    'Drive Size'      => 'text',
    'Connection'      => 'text',
    'Time Estimate'   => 'text',
    'Status'          => 'text',
  );
  my $dev = '';
  for $dev (sort keys %drives) {
    my $id_bus = $drives{$dev}{'id_bus'};
    my $id_type = $drives{$dev}{'id_type'};
    my $dev_size = $drives{$dev}{'dev_size'};
    my $dev_desc = $drives{$dev}{'dev_desc'};
    my $dev_serial = $drives{$dev}{'id_serial_short'};
    my $dev_estimate = $drives{$dev}{'id_ata_feature_set_security_erase_unit_min'};
    if ((defined($dev_estimate)) && ($dev_estimate eq '0')) { $dev_estimate = 'Unknown'; } else { $dev_estimate .= " minutes"; }
    my $dev_status = $drives{$dev}{'id_ata_feature_set_security_frozen'};
    if ((defined($dev_status)) && ($dev_status eq '1')) { $dev_status = 'FROZEN'; } else { $dev_status = 'READY'; }
    if ((defined($drives{$dev}{'id_ata_feature_set_security_locked'})) && ($drives{$dev}{'id_ata_feature_set_security_locked'} eq '1')) { $dev_status = 'LOCKED'; }
    if ((defined($drives{$dev}{'id_ata_feature_set_security'})) && ($drives{$dev}{'id_ata_feature_set_security'} eq '1')) {
      # This drive is capable of being reset
      my $targeted = '0';
      if ($dev ~~ @targets) { $targeted = '1'; }
      push @{$slist->{data}}, [ $dev, $targeted, $dev_desc, $dev_serial, $dev_size, $id_bus, $dev_estimate, $dev_status ];
    }
  }
  $slist->get_selection->unselect_all();
  set_busy(FALSE);
  target_changed();
}

sub get_drive_list {
  # Get a list of all physical drives (and details for each)
  `udevadm trigger`;
  sleep(3);
  my %final_list = ();
  my @drives = `ls -1 /sys/block/ | grep -v -E '^fd|^loop|^ram'`;
  foreach my $dev (@drives) {
    chomp($dev);
    $final_list{$dev} = get_drive_details($dev);
  }
  #print Dumper(\%final_list);
  return %final_list;
}

sub get_drive_details {
  # Get the details for a given drive
  my $dev = $_[0];
  chomp($dev);
  my @data = `udevadm info --query=property --path=/sys/block/$dev | grep -E '^DEVNAME=|^ID_TYPE=|^ID_VENDOR=|^ID_MODEL=|^ID_SERIAL_SHORT=|^ID_BUS=|^ID_ATA_SATA=|^ID_ATA_FEATURE_SET_SECURITY|^ID_ATA_FEATURE_SET_HPA'`;
  my %details = ();
  foreach my $line (@data) {
    chomp($line);
    my ($key, $val) = ($line, $line);
    $key =~ s/=.*$//g;
    $val =~ s/^.*=//g;
    $key = lc($key);
    $details{$key} = $val;
  }
  my $dev_size = `fdisk -l /dev/$dev | grep -E '^Disk /dev/$dev' | sed 's/^.*: //' | sed 's/,.*\$//'`;
  chomp($dev_size);
  if ($dev_size eq '') { $dev_size = 'Unknown'; }
  $details{'dev_size'} = $dev_size;
  if (defined($details{'id_ata_sata'})) { $details{'id_bus'} = 's'.$details{'id_bus'}; }
  if (defined($details{'id_ata_feature_set_hpa'})) {
    if ($details{'id_ata_feature_set_hpa_enabled'} eq '1') {
      my $hpa_data = `hdparm -N /dev/$dev | grep 'HPA' | sed 's/^.*=\\s*//' | sed 's/,.*\$//'`;
      chomp($hpa_data);
      $hpa_data =~ s/^\s*|\s*$//g;
      my ($visible, $real) = split('/', $hpa_data);
      if (($visible > 10000) && ($real > 10000)) {
        $details{'hpa_sectors_real'} = $real;
        $details{'hpa_sectors_visible'} = $visible;
      }
    }
    my $dco_data = `hdparm --dco-identify /dev/$dev | grep 'Real max sectors' | wc -l`;
    chomp($dco_data);
    $details{'hpa_dco'} = $dco_data;
  }
  $details{'id_bus'} = uc($details{'id_bus'});
  $details{'dev_desc'} = $details{'id_model'};
  if (defined($details{'id_vendor'})) { $details{'dev_desc'} = $details{'id_vendor'}.' '.$details{'dev_desc'}; }
  $details{'dev_desc'} =~ s/_/ /g;
  $details{'dev_desc'} =~ s/^\s+|\s+$//g;
  if (TEST_MODE) { $details{'id_ata_feature_set_security_frozen'} = '0'; }
  return \%details;
}

sub get_drivenum_partnum {
  # Given a /dev/XXX partition, return the drive and partition numbers
  my $dpd = $_[0];
  $dpd =~ s/\/dev\/sd//g;
  my $dn = substr($dpd,0,1);
  $dn = ord("\L$dn")-96;
  my $pn = substr($dpd,1);
  return ($dn, $pn);
}

sub fatal_crash {
  # Crash out with a fatal error message
  my $parent = our $builder->get_object('main_app');
  my $message = $_[0].chr(13).chr(13)."Unable to continue. The program will now exit.";
  my $dialog = Gtk2::MessageDialog->new($parent, 'modal', 'error', 'cancel', $message);
  beeper('error');
  $dialog->run;
  $dialog->destroy;
  on_main_app_destroy();
}

sub error_message {
  # Show a non-fatal error message
  my $parent = our $builder->get_object('main_app');
  my $message = $_[0];
  my $dialog = Gtk2::MessageDialog->new($parent, 'modal', 'warning', 'ok', $message);
  beeper('warning');
  $dialog->run;
  $dialog->destroy;
}

sub on_main_app_destroy {
  # Close the application
  system('killall -9 hdparm');
  our $PROGRESS;
  if (defined($PROGRESS)) { close($PROGRESS); }
  Gtk2->main_quit();
  die("Exiting.\n");
}

sub suspend_power {
  # Put the computer in standby/suspend mode
  `pm-suspend`;
}

sub trim {
  # Trim whitespace from both ends of a string
  my $string = shift;
  $string =~ s/^\s+//;
  $string =~ s/\s+$//;
  return $string;
}

sub beeper {
  # Play a system beep pattern
  my $tone = shift;
  my $args = '';
  if ($tone eq 'done') { $args = '-l 100 -f 1200 -n -l 100 -f 1800 -n -l 100 -f 2400'; }
  if ($tone eq 'warning') { $args = '-f 250 -r 3 -l 50'; }
  if ($tone eq 'error') { $args = '-l 1000 -f 100'; }
  system('beep '.$args);
  return 1;
}
